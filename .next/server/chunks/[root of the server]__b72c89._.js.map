{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Play%20Ground/Web%20Dev/NEXT%20JS/projects/chat-along/src/app/%28server%29/_database/connectToDatabase.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nexport const connectToDB = async () => {\r\n\ttry {\r\n\t\tawait mongoose.connect(String(process.env.DATABASE_URL), {\r\n\t\t\tserverSelectionTimeoutMS: 5000,\r\n\t\t});\r\n\t\tconsole.log(\"Connected To Database!!!\");\r\n\t} catch (error) {\r\n\t\tconsole.log(\"The error message says -> \", (error as Error).message);\r\n\t}\r\n};\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,cAAc;IAC1B,IAAI;QACH,MAAM,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,OAAO,QAAQ,GAAG,CAAC,YAAY,GAAG;YACxD,0BAA0B;QAC3B;QACA,QAAQ,GAAG,CAAC;IACb,EAAE,OAAO,OAAO;QACf,QAAQ,GAAG,CAAC,8BAA8B,AAAC,MAAgB,OAAO;IACnE;AACD"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Play%20Ground/Web%20Dev/NEXT%20JS/projects/chat-along/src/app/%28server%29/_database/models/user/index.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface UserSchemaInterface extends Document {\r\n\tname: string;\r\n\temail: string;\r\n\tpassword: string;\r\n\tphone: string;\r\n\tusername: string;\r\n\tposts: [string];\r\n\tfollowing: [string];\r\n\tfollowers: [string];\r\n\timage: { image_url: string; public_id: string };\r\n\tstatus: StatusInterface[];\r\n\tblocked_users: [string];\r\n\tsettings: {\r\n\t\tsound: boolean;\r\n\t\tdarkMode: boolean;\r\n\t\tpopUp: boolean;\r\n\t};\r\n\tnotifications: Array<{\r\n\t\taction: string;\r\n\t\timage: { image_url: string; public_id: string };\r\n\t\tname: string;\r\n\t\tlink: string;\r\n\t}>;\r\n\tchats: {\r\n\t\t[id: string]: Array<{\r\n\t\t\tname: string;\r\n\t\t\timage: { image_url: string; public_id: string };\r\n\t\t\tmessage: string;\r\n\t\t\timageMessage: string;\r\n\t\t\ttime: string;\r\n\t\t\tsenderId: string;\r\n\t\t\tseen: boolean;\r\n\t\t}>;\r\n\t};\r\n}\r\n\r\nconst userSchema: Schema = new mongoose.Schema<UserSchemaInterface>(\r\n\t{\r\n\t\tname: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Name is required.\"],\r\n\t\t},\r\n\t\temail: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Email is required.\"],\r\n\t\t\tunique: true,\r\n\t\t},\r\n\t\tpassword: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Password is required\"],\r\n\t\t},\r\n\t\tphone: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Phone number is required\"],\r\n\t\t},\r\n\t\tusername: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Username is required\"],\r\n\t\t\tunique: true,\r\n\t\t},\r\n\t\tposts: [\r\n\t\t\t{\r\n\t\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\tref: \"posts\",\r\n\t\t\t},\r\n\t\t],\r\n\t\tfollowing: [\r\n\t\t\t{\r\n\t\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\tref: \"users\",\r\n\t\t\t},\r\n\t\t],\r\n\t\tfollowers: [\r\n\t\t\t{\r\n\t\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\tref: \"users\",\r\n\t\t\t},\r\n\t\t],\r\n\t\timage: {\r\n\t\t\timage_url: String,\r\n\t\t\tpublic_id: String,\r\n\t\t},\r\n\t\tchats: {\r\n\t\t\ttype: Object, // Ensure chats is an object\r\n\t\t\tdefault: {\r\n\t\t\t\ttest: [],\r\n\t\t\t},\r\n\t\t},\r\n\t\tsettings: {\r\n\t\t\ttype: Object,\r\n\t\t\tdefault: {\r\n\t\t\t\tsound: false,\r\n\t\t\t\tpopUp: false,\r\n\t\t\t\tdarkMode: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tnotifications: [],\r\n\t\tstatus: [\r\n\t\t\t{\r\n\t\t\t\tstatusContent: String,\r\n\t\t\t\tstatusId: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\tcolorCode: String,\r\n\t\t\t\tcolorName: String,\r\n\t\t\t},\r\n\t\t],\r\n\t\tblocked_users: [\r\n\t\t\t{\r\n\t\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\tref: \"users\",\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\n(mongoose.models as object) = {};\r\n\r\nconst userModel = mongoose.model<UserSchemaInterface>(\"users\", userSchema);\r\nexport { userModel };\r\n"],"names":[],"mappings":";;;AAAA;;AAsCA,MAAM,aAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC7C;IACC,MAAM;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;IACtC;IACA,OAAO;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;QACtC,QAAQ;IACT;IACA,UAAU;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IACzC;IACA,OAAO;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;IAC7C;IACA,UAAU;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,QAAQ;IACT;IACA,OAAO;QACN;YACC,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACN;KACA;IACD,WAAW;QACV;YACC,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACN;KACA;IACD,WAAW;QACV;YACC,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACN;KACA;IACD,OAAO;QACN,WAAW;QACX,WAAW;IACZ;IACA,OAAO;QACN,MAAM;QACN,SAAS;YACR,MAAM,EAAE;QACT;IACD;IACA,UAAU;QACT,MAAM;QACN,SAAS;YACR,OAAO;YACP,OAAO;YACP,UAAU;QACX;IACD;IACA,eAAe,EAAE;IACjB,QAAQ;QACP;YACC,eAAe;YACf,UAAU,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACxC,WAAW;YACX,WAAW;QACZ;KACA;IACD,eAAe;QACd;YACC,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YACpC,KAAK;QACN;KACA;AACF,GACA;IAAE,YAAY;AAAK;AAGnB,iGAAA,CAAA,UAAQ,CAAC,MAAM,GAAc,CAAC;AAE/B,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAsB,SAAS"}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Play%20Ground/Web%20Dev/NEXT%20JS/projects/chat-along/src/app/%28server%29/_database/models/post/index.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\r\n\r\nexport interface PostSchemaInterface extends Document {\r\n\tcreator: mongoose.Schema.Types.ObjectId;\r\n\tpost_image: { image_url: string; public_id: string };\r\n\tcaption: string;\r\n\tlikes: [string];\r\n\tcomments: [object];\r\n\tdate: string;\r\n}\r\n\r\nconst postSchema: Schema = new mongoose.Schema<PostSchemaInterface>(\r\n\t{\r\n\t\tcreator: {\r\n\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\tref: \"users\",\r\n\t\t\trequired: [true, \"Creator Id is required\"],\r\n\t\t},\r\n\t\tdate: String,\r\n\t\tpost_image: {\r\n\t\t\timage_url: String,\r\n\t\t\tpublic_id: String,\r\n\t\t},\r\n\t\tcaption: {\r\n\t\t\ttype: String,\r\n\t\t\trequired: [true, \"Post caption is required\"],\r\n\t\t},\r\n\t\tlikes: [{ type: mongoose.Schema.Types.ObjectId, ref: \"users\" }],\r\n\t\tcomments: [\r\n\t\t\t{\r\n\t\t\t\tcomment: String,\r\n\t\t\t\tuserId: {\r\n\t\t\t\t\ttype: mongoose.Schema.Types.ObjectId,\r\n\t\t\t\t\tref: \"users\",\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n\t{ timestamps: true }\r\n);\r\n\r\n(mongoose.models as object) = {};\r\n\r\nconst postModel = mongoose.model<PostSchemaInterface>(\"posts\", postSchema);\r\nexport { postModel };\r\n"],"names":[],"mappings":";;;AAAA;;AAWA,MAAM,aAAqB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAC7C;IACC,SAAS;QACR,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;YAAC;YAAM;SAAyB;IAC3C;IACA,MAAM;IACN,YAAY;QACX,WAAW;QACX,WAAW;IACZ;IACA,SAAS;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;IAC7C;IACA,OAAO;QAAC;YAAE,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;YAAE,KAAK;QAAQ;KAAE;IAC/D,UAAU;QACT;YACC,SAAS;YACT,QAAQ;gBACP,MAAM,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;gBACpC,KAAK;YACN;QACD;KACA;AACF,GACA;IAAE,YAAY;AAAK;AAGnB,iGAAA,CAAA,UAAQ,CAAC,MAAM,GAAc,CAAC;AAE/B,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAsB,SAAS"}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Play%20Ground/Web%20Dev/NEXT%20JS/projects/chat-along/src/app/%28server%29/api/%28public%29/get-all-posts/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { connectToDB } from \"../../../_database/connectToDatabase\";\r\nimport { postModel } from \"../../../_database/models\";\r\n\r\nconnectToDB();\r\n\r\nexport async function GET() {\r\n\ttry {\r\n\t\tconst posts = await postModel\r\n\t\t\t.find({})\r\n\t\t\t.populate(\"creator\", [\"name\", \"username\", \"image\"])\r\n\t\t\t.populate(\"comments.userId\", [\"name\", \"username\", \"image\"])\r\n\t\t\t.populate(\"likes\", [\"id\", \"name\", \"username\", \"image\"]);\r\n\r\n\t\treturn NextResponse.json({\r\n\t\t\tsuccess: true,\r\n\t\t\tmessage: \"Fetched public posts.\",\r\n\t\t\tdata: posts.reverse(),\r\n\t\t});\r\n\t} catch (error) {\r\n\t\treturn NextResponse.json({\r\n\t\t\tsuccess: false,\r\n\t\t\tmessage: (error as Error).message,\r\n\t\t});\r\n\t}\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;;;;AAEA,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD;AAEH,eAAe;IACrB,IAAI;QACH,MAAM,QAAQ,MAAM,kKAAA,CAAA,YAAS,CAC3B,IAAI,CAAC,CAAC,GACN,QAAQ,CAAC,WAAW;YAAC;YAAQ;YAAY;SAAQ,EACjD,QAAQ,CAAC,mBAAmB;YAAC;YAAQ;YAAY;SAAQ,EACzD,QAAQ,CAAC,SAAS;YAAC;YAAM;YAAQ;YAAY;SAAQ;QAEvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,SAAS;YACT,SAAS;YACT,MAAM,MAAM,OAAO;QACpB;IACD,EAAE,OAAO,OAAO;QACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACxB,SAAS;YACT,SAAS,AAAC,MAAgB,OAAO;QAClC;IACD;AACD"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}